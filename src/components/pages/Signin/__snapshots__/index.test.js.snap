// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should match snapshot: Signin/nomal 1`] = `
.c0 {
  padding: 10px 15px;
}

.c2 {
  cursor: pointer;
}

.c2:active {
  opacity: 0.4;
}

.c1 {
  margin-top: 10px;
  text-align: center;
}

.c3 {
  font-size: 120%;
  text-align: center;
}

<MockRouter
  createHref={[Function]}
  location=""
  params={Object {}}
  path=""
  push={[Function]}
  replace={[Function]}
  url=""
>
  <Signin
    firebase={
      Object {
        "doSignInWithEmailAndPassword": [MockFunction],
      }
    }
    history={
      Object {
        "push": [MockFunction],
      }
    }
  >
    <Container
      authUser={null}
      noPadding={false}
    >
      <withRouter()
        authUser={null}
      >
        <Route>
          <Component
            authUser={null}
            history={
              Object {
                "createHref": [Function],
                "path": "",
                "push": [Function],
                "replace": [Function],
              }
            }
            location=""
            match={
              Object {
                "params": Object {},
                "path": "",
                "url": "",
              }
            }
          >
            <NavigationBar
              authUser={null}
              firebase={null}
              history={
                Object {
                  "createHref": [Function],
                  "path": "",
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location=""
              match={
                Object {
                  "params": Object {},
                  "path": "",
                  "url": "",
                }
              }
            >
              <Blueprint3.Navbar>
                <div
                  className="bp3-navbar"
                >
                  <Blueprint3.NavbarGroup
                    align="left"
                  >
                    <div
                      className="bp3-navbar-group bp3-align-left"
                    >
                      <Blueprint3.NavbarHeading>
                        <div
                          className="bp3-navbar-heading"
                        >
                          IPPO
                        </div>
                      </Blueprint3.NavbarHeading>
                      <Blueprint3.NavbarDivider>
                        <div
                          className="bp3-navbar-divider"
                        />
                      </Blueprint3.NavbarDivider>
                    </div>
                  </Blueprint3.NavbarGroup>
                  <Blueprint3.NavbarGroup
                    align="right"
                  >
                    <div
                      className="bp3-navbar-group bp3-align-right"
                    >
                      <Blueprint3.Button
                        icon="wrench"
                        minimal={true}
                        onClick={[Function]}
                      >
                        <button
                          className="bp3-button bp3-minimal"
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          type="button"
                        >
                          <Blueprint3.Icon
                            icon="wrench"
                            key="leftIcon"
                          >
                            <span
                              className="bp3-icon bp3-icon-wrench"
                              icon="wrench"
                            >
                              <svg
                                data-icon="wrench"
                                height={16}
                                viewBox="0 0 16 16"
                                width={16}
                              >
                                <desc>
                                  wrench
                                </desc>
                                <path
                                  d="M15.83 3.7l-3.06 3.05-2.84-.7-.7-2.83L12.29.17a5.004 5.004 0 0 0-4.83 1.29 4.967 4.967 0 0 0-1.12 5.36L.58 12.58c-.36.36-.58.86-.58 1.41 0 1.1.9 2 2 2 .55 0 1.05-.22 1.41-.59l5.77-5.77c1.79.69 3.91.33 5.35-1.12 1.32-1.3 1.74-3.15 1.3-4.81z"
                                  fillRule="evenodd"
                                  key="0"
                                />
                              </svg>
                            </span>
                          </Blueprint3.Icon>
                          <Blueprint3.Icon
                            key="rightIcon"
                          />
                        </button>
                      </Blueprint3.Button>
                    </div>
                  </Blueprint3.NavbarGroup>
                </div>
              </Blueprint3.Navbar>
            </NavigationBar>
          </Component>
        </Route>
      </withRouter()>
      <styled.div
        noPadding={false}
      >
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bdVaJa",
                "isStatic": false,
                "lastClassName": "c0",
                "rules": Array [
                  "
  padding: ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bdVaJa",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          noPadding={false}
        >
          <div
            className="c0"
          >
            <SigninForm
              onSubmit={[Function]}
            >
              <form>
                <Blueprint3.FormGroup
                  label="メールアドレス"
                  labelFor="email"
                >
                  <div
                    className="bp3-form-group"
                  >
                    <label
                      className="bp3-label"
                      htmlFor="email"
                    >
                      メールアドレス
                       
                      <span
                        className="bp3-text-muted"
                      />
                    </label>
                    <div
                      className="bp3-form-content"
                    >
                      <Blueprint3.InputGroup
                        id="email"
                        large={true}
                        name="email"
                        onChange={[Function]}
                        value=""
                      >
                        <div
                          className="bp3-input-group bp3-large"
                        >
                          <Blueprint3.Icon />
                          <input
                            className="bp3-input"
                            id="email"
                            name="email"
                            onChange={[Function]}
                            style={
                              Object {
                                "paddingRight": 10,
                              }
                            }
                            type="text"
                            value=""
                          />
                        </div>
                      </Blueprint3.InputGroup>
                    </div>
                  </div>
                </Blueprint3.FormGroup>
                <Blueprint3.FormGroup
                  label="パスワード"
                  labelFor="pass"
                >
                  <div
                    className="bp3-form-group"
                  >
                    <label
                      className="bp3-label"
                      htmlFor="pass"
                    >
                      パスワード
                       
                      <span
                        className="bp3-text-muted"
                      />
                    </label>
                    <div
                      className="bp3-form-content"
                    >
                      <Blueprint3.InputGroup
                        id="pass"
                        large={true}
                        name="pass"
                        onChange={[Function]}
                        type="password"
                        value=""
                      >
                        <div
                          className="bp3-input-group bp3-large"
                        >
                          <Blueprint3.Icon />
                          <input
                            className="bp3-input"
                            id="pass"
                            name="pass"
                            onChange={[Function]}
                            style={
                              Object {
                                "paddingRight": 10,
                              }
                            }
                            type="password"
                            value=""
                          />
                        </div>
                      </Blueprint3.InputGroup>
                    </div>
                  </div>
                </Blueprint3.FormGroup>
                <Blueprint3.Button
                  disabled={true}
                  fill={true}
                  large={true}
                  onClick={[Function]}
                  text="ログイン"
                  type="submit"
                >
                  <button
                    className="bp3-button bp3-disabled bp3-fill bp3-large"
                    disabled={true}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    tabIndex={-1}
                    type="submit"
                  >
                    <Blueprint3.Icon
                      key="leftIcon"
                    />
                    <span
                      className="bp3-button-text"
                      key="text"
                    >
                      ログイン
                    </span>
                    <Blueprint3.Icon
                      key="rightIcon"
                    />
                  </button>
                </Blueprint3.Button>
              </form>
            </SigninForm>
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bxivhb",
                      "isStatic": true,
                      "lastClassName": "c1",
                      "rules": Array [
                        "
  margin-top: 10px;
  text-align: center;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bxivhb",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="c1"
                >
                  <GoogleButton
                    onClick={[Function]}
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-htpNat",
                            "isStatic": true,
                            "lastClassName": "c2",
                            "rules": Array [
                              "
  cursor: pointer;
  &:active {
    opacity: 0.4;
  }
",
                            ],
                          },
                          "displayName": "GoogleButton",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-htpNat",
                          "target": [Function],
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                          Symbol(Symbol.hasInstance): [Function],
                        }
                      }
                      forwardedRef={null}
                      onClick={[Function]}
                    >
                      <GoogleButton
                        className="c2"
                        onClick={[Function]}
                      >
                        <svg
                          className="c2"
                          height="3em"
                          onClick={[Function]}
                          viewBox="0 0 193 48"
                          width="12em"
                        >
                          <defs>
                            <rect
                              height={40}
                              id="btn_google_signin_dark_normal_web_svg__b"
                              rx={2}
                              width={185}
                              x={0}
                              y={0}
                            />
                            <filter
                              filterUnits="objectBoundingBox"
                              height="112.5%"
                              id="btn_google_signin_dark_normal_web_svg__a"
                              width="102.2%"
                              x="-1.1%"
                              y="-5%"
                            >
                              <feOffset
                                dy={1}
                                in="SourceAlpha"
                                result="shadowOffsetOuter1"
                              />
                              <feGaussianBlur
                                in="shadowOffsetOuter1"
                                result="shadowBlurOuter1"
                                stdDeviation={0.5}
                              />
                              <feColorMatrix
                                in="shadowBlurOuter1"
                                result="shadowMatrixOuter1"
                                values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.24 0"
                              />
                              <feOffset
                                in="SourceAlpha"
                                result="shadowOffsetOuter2"
                              />
                              <feGaussianBlur
                                in="shadowOffsetOuter2"
                                result="shadowBlurOuter2"
                                stdDeviation={0.5}
                              />
                              <feColorMatrix
                                in="shadowBlurOuter2"
                                result="shadowMatrixOuter2"
                                values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.12 0"
                              />
                              <feMerge>
                                <feMergeNode
                                  in="shadowMatrixOuter1"
                                />
                                <feMergeNode
                                  in="shadowMatrixOuter2"
                                />
                              </feMerge>
                            </filter>
                          </defs>
                          <g
                            fill="none"
                            fillRule="evenodd"
                          >
                            <g
                              transform="translate(4 4)"
                            >
                              <use
                                fill="#000"
                                filter="url(#btn_google_signin_dark_normal_web_svg__a)"
                                xlinkHref="#btn_google_signin_dark_normal_web_svg__b"
                              />
                              <use
                                fill="#4285F4"
                                xlinkHref="#btn_google_signin_dark_normal_web_svg__b"
                              />
                            </g>
                            <text
                              fill="#FFF"
                              fontFamily="Helvetica"
                              fontSize={14}
                              letterSpacing={0.219}
                            >
                              <tspan
                                x={54}
                                y={30}
                              >
                                Sign in with Google
                              </tspan>
                            </text>
                            <rect
                              fill="#FFF"
                              height={38}
                              rx={1}
                              width={38}
                              x={5}
                              y={5}
                            />
                            <path
                              d="M32.64 24.205c0-.639-.057-1.252-.164-1.841H24v3.481h4.844a4.14 4.14 0 0 1-1.796 2.716v2.259h2.908c1.702-1.567 2.684-3.875 2.684-6.615z"
                              fill="#4285F4"
                            />
                            <path
                              d="M24 33c2.43 0 4.467-.806 5.956-2.18l-2.908-2.259c-.806.54-1.837.86-3.048.86-2.344 0-4.328-1.584-5.036-3.711h-3.007v2.332A8.997 8.997 0 0 0 24 33z"
                              fill="#34A853"
                            />
                            <path
                              d="M18.964 25.71a5.41 5.41 0 0 1-.282-1.71c0-.593.102-1.17.282-1.71v-2.332h-3.007A8.996 8.996 0 0 0 15 24c0 1.452.348 2.827.957 4.042l3.007-2.332z"
                              fill="#FBBC05"
                            />
                            <path
                              d="M24 18.58c1.321 0 2.508.454 3.44 1.345l2.582-2.58C28.463 15.891 26.426 15 24 15a8.997 8.997 0 0 0-8.043 4.958l3.007 2.332c.708-2.127 2.692-3.71 5.036-3.71z"
                              fill="#EA4335"
                            />
                            <path
                              d="M15 15h18v18H15z"
                            />
                          </g>
                        </svg>
                      </GoogleButton>
                    </StyledComponent>
                  </GoogleButton>
                </div>
              </StyledComponent>
            </styled.div>
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-ifAKCX",
                      "isStatic": true,
                      "lastClassName": "c3",
                      "rules": Array [
                        "
  font-size: 120%;
  text-align: center;
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-ifAKCX",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="c3"
                >
                  <Blueprint3.Button
                    intent="primary"
                    large={true}
                    minimal={true}
                    onClick={[Function]}
                  >
                    <button
                      className="bp3-button bp3-large bp3-minimal bp3-intent-primary"
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      type="button"
                    >
                      <Blueprint3.Icon
                        key="leftIcon"
                      />
                      <span
                        className="bp3-button-text"
                        key="text"
                      >
                        新規登録
                      </span>
                      <Blueprint3.Icon
                        key="rightIcon"
                      />
                    </button>
                  </Blueprint3.Button>
                </div>
              </StyledComponent>
            </styled.div>
            <SignupFormDialog
              isOpen={false}
              onClose={[Function]}
              onSubmit={[Function]}
            >
              <Blueprint3.Dialog
                canOutsideClickClose={true}
                isCloseButtonShown={true}
                isOpen={false}
                onClose={[Function]}
                style={
                  Object {
                    "margin": "0 15px",
                  }
                }
                title="ユーザ登録"
              >
                <Blueprint3.Overlay
                  autoFocus={true}
                  backdropProps={Object {}}
                  canEscapeKeyClose={true}
                  canOutsideClickClose={true}
                  className="bp3-overlay-scroll-container"
                  enforceFocus={true}
                  hasBackdrop={true}
                  isCloseButtonShown={true}
                  isOpen={false}
                  lazy={true}
                  onClose={[Function]}
                  style={
                    Object {
                      "margin": "0 15px",
                    }
                  }
                  title="ユーザ登録"
                  transitionDuration={300}
                  transitionName="bp3-overlay"
                  usePortal={true}
                />
              </Blueprint3.Dialog>
            </SignupFormDialog>
            <OverlaySpinner
              loading={false}
            >
              <Blueprint3.Overlay
                autoFocus={true}
                backdropProps={Object {}}
                canEscapeKeyClose={true}
                canOutsideClickClose={true}
                enforceFocus={true}
                hasBackdrop={true}
                isOpen={false}
                lazy={true}
                transitionDuration={300}
                transitionName="bp3-overlay"
                usePortal={true}
              />
            </OverlaySpinner>
          </div>
        </StyledComponent>
      </styled.div>
    </Container>
  </Signin>
</MockRouter>
`;
