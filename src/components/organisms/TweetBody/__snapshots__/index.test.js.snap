// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should match snapshot: TweetBody/big 1`] = `
.c0 {
  margin: 0 0 5px;
  white-space: pre-wrap;
  word-wrap: break-word;
  font-size: 22px;
}

.c1 {
  -webkit-text-decoration: none;
  text-decoration: none;
}

<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <MockRouter
    createHref={[Function]}
    location=""
    params={Object {}}
    path=""
    push={[Function]}
    replace={[Function]}
    url=""
  >
    <TweetBody
      bigText={true}
      text="Storybookいいところ
  - どんなコンポーネントが存在してるか可視化できる
  - コンポーネントの扱い方が分かる
  - UIの修正デバッグが楽
  #ThinkAtomicDesign"
    >
      <styled.div
        bigText={1}
      >
        <StyledComponent
          bigText={1}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bdVaJa",
                "isStatic": false,
                "lastClassName": "c0",
                "rules": Array [
                  "
  margin: 0 0 5px;
  white-space: pre-wrap;
  word-wrap: break-word;
  font-size: ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bdVaJa",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c0"
          >
            Storybookいいところ
  - どんなコンポーネントが存在してるか可視化できる
  - コンポーネントの扱い方が分かる
  - UIの修正デバッグが楽
  
            <Styled(Link)
              key="#ThinkAtomicDesign0"
              to="/tweets?hashtag=ThinkAtomicDesign"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bwzfXH",
                      "isStatic": true,
                      "lastClassName": "c1",
                      "rules": Array [
                        "
  text-decoration: none;
",
                      ],
                    },
                    "displayName": "Styled(Link)",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bwzfXH",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
                to="/tweets?hashtag=ThinkAtomicDesign"
              >
                <Link
                  className="c1"
                  replace={false}
                  to="/tweets?hashtag=ThinkAtomicDesign"
                >
                  <a
                    className="c1"
                    onClick={[Function]}
                  >
                    #ThinkAtomicDesign
                  </a>
                </Link>
              </StyledComponent>
            </Styled(Link)>
          </div>
        </StyledComponent>
      </styled.div>
    </TweetBody>
  </MockRouter>
</Provider>
`;

exports[`should match snapshot: TweetBody/nomal 1`] = `
.c0 {
  margin: 0 0 5px;
  white-space: pre-wrap;
  word-wrap: break-word;
  font-size: inherit;
}

.c1 {
  -webkit-text-decoration: none;
  text-decoration: none;
}

<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <MockRouter
    createHref={[Function]}
    location=""
    params={Object {}}
    path=""
    push={[Function]}
    replace={[Function]}
    url=""
  >
    <TweetBody
      bigText={false}
      text="Storybookいいところ
  - どんなコンポーネントが存在してるか可視化できる
  - コンポーネントの扱い方が分かる
  - UIの修正デバッグが楽
  #ThinkAtomicDesign"
    >
      <styled.div
        bigText={0}
      >
        <StyledComponent
          bigText={0}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bdVaJa",
                "isStatic": false,
                "lastClassName": "c0",
                "rules": Array [
                  "
  margin: 0 0 5px;
  white-space: pre-wrap;
  word-wrap: break-word;
  font-size: ",
                  [Function],
                  ";
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bdVaJa",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c0"
          >
            Storybookいいところ
  - どんなコンポーネントが存在してるか可視化できる
  - コンポーネントの扱い方が分かる
  - UIの修正デバッグが楽
  
            <Styled(Link)
              key="#ThinkAtomicDesign0"
              to="/tweets?hashtag=ThinkAtomicDesign"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bwzfXH",
                      "isStatic": true,
                      "lastClassName": "c1",
                      "rules": Array [
                        "
  text-decoration: none;
",
                      ],
                    },
                    "displayName": "Styled(Link)",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bwzfXH",
                    "target": [Function],
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                    Symbol(Symbol.hasInstance): [Function],
                  }
                }
                forwardedRef={null}
                to="/tweets?hashtag=ThinkAtomicDesign"
              >
                <Link
                  className="c1"
                  replace={false}
                  to="/tweets?hashtag=ThinkAtomicDesign"
                >
                  <a
                    className="c1"
                    onClick={[Function]}
                  >
                    #ThinkAtomicDesign
                  </a>
                </Link>
              </StyledComponent>
            </Styled(Link)>
          </div>
        </StyledComponent>
      </styled.div>
    </TweetBody>
  </MockRouter>
</Provider>
`;
