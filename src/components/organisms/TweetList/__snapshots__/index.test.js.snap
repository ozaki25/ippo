// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should match snapshot: TweetList/nomal 1`] = `
.c3 {
  border-radius: 50%;
  float: left;
  height: 48px;
  margin-top: 3px;
  position: absolute;
  width: 48px;
}

.c0 {
  border-bottom: 1px solid #e6ecf0;
  padding: 9px 12px 0;
}

.c1 {
  margin-left: 58px;
}

.c2 {
  margin-left: -58px;
}

.c4 {
  margin: 0;
  white-space: pre-wrap;
  word-wrap: break-word;
}

.c5 {
  display: inline-block;
  min-width: 80px;
}

.c6 {
  text-align: center;
}

<MockRouter
  createHref={[Function]}
  location=""
  params={Object {}}
  path=""
  push={[Function]}
  replace={[Function]}
  url=""
>
  <TweetList
    hasMore={true}
    items={
      Array [
        Object {
          "id": "1",
          "name": "ozaki25",
          "text": "PagesとOrganisms以外は状態を持たせない
  - それ以外のコンポーネントはステートレスなので簡単に作れる
  - Reduxみたいなところはフロントエンドエンジニアにまかせる
  #ThinkAtomicDesign",
          "time": "12月10日",
        },
        Object {
          "id": "2",
          "name": "ozaki25",
          "text": "コンポーネントマネージャー
  - コンポーネントの管理に責任を持つ人
  #ThinkAtomicDesign",
          "time": "12月10日",
        },
        Object {
          "id": "3",
          "name": "ozaki25",
          "text": "Storybookいいところ
  - どんなコンポーネントが存在してるか可視化できる
  - コンポーネントの扱い方が分かる
  - UIの修正デバッグが楽
  #ThinkAtomicDesign",
          "time": "12月10日",
        },
        Object {
          "id": "4",
          "name": "ozaki25",
          "text": "不必要にコンポーネント化しすぎた
  AtomicDesignあるあるだと思う
  #ThinkAtomicDesign",
          "time": "12月10日",
        },
        Object {
          "id": "5",
          "name": "ozaki25",
          "text": "これかな
  http://atomicdesign.bradfrost.com/chapter-4/ 
  #ThinkAtomicDesign",
          "time": "12月10日",
        },
        Object {
          "id": "6",
          "name": "ozaki25",
          "text": "AtomicDesignはベースにすぎなくてプロジェクトごとに柔軟に変えていくことも必要
  #ThinkAtomicDesign",
          "time": "12月10日",
        },
        Object {
          "id": "7",
          "name": "ozaki25",
          "text": "PagesとOrganismsどの単位でReduxをConnectするか
  #ThinkAtomicDesign",
          "time": "12月10日",
        },
        Object {
          "id": "8",
          "name": "ozaki25",
          "text": "コンポーネント指向
  - 見た目と機能をカプセル化
  #ThinkAtomicDesign",
          "time": "12月10日",
        },
        Object {
          "id": "9",
          "name": "ozaki25",
          "text": "Template必要なのか
  たしかに使ってない
  #ThinkAtomicDesign",
          "time": "12月10日",
        },
      ]
    }
    loadMore={[MockFunction]}
  >
    <InfiniteScroll
      element="div"
      getScrollParent={null}
      hasMore={true}
      initialLoad={true}
      isReverse={false}
      key="9"
      loadMore={[MockFunction]}
      loader={
        <ForwardRef>
          <WithStyles(CircularProgress) />
        </ForwardRef>
      }
      pageStart={0}
      ref={null}
      threshold={100}
      useCapture={false}
      useWindow={true}
    >
      <div>
        <Tweet
          id="1"
          key="1"
          name="ozaki25"
          text="PagesとOrganisms以外は状態を持たせない
  - それ以外のコンポーネントはステートレスなので簡単に作れる
  - Reduxみたいなところはフロントエンドエンジニアにまかせる
  #ThinkAtomicDesign"
          time="12月10日"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "
  border-bottom: 1px solid #e6ecf0;
  padding: 9px 12px 0;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c0"
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "
  margin-left: 58px;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <Styled(IconImage)
                        src="/icon.png"
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bxivhb",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "
  margin-left: -58px;
",
                                ],
                              },
                              "displayName": "Styled(IconImage)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bxivhb",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          src="/icon.png"
                        >
                          <IconImage
                            className="c2"
                            src="/icon.png"
                          >
                            <styled.img
                              className="c2"
                              src="/icon.png"
                            >
                              <StyledComponent
                                className="c2"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bdVaJa",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "
  border-radius: 50%;
  float: left;
  height: 48px;
  margin-top: 3px;
  position: absolute;
  width: 48px;
",
                                      ],
                                    },
                                    "displayName": "styled.img",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bdVaJa",
                                    "target": "img",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                src="/icon.png"
                              >
                                <img
                                  className="c2 c3"
                                  src="/icon.png"
                                />
                              </StyledComponent>
                            </styled.img>
                          </IconImage>
                        </StyledComponent>
                      </Styled(IconImage)>
                      <TweetHeader
                        name="ozaki25"
                        time="12月10日"
                      >
                        <strong>
                          ozaki25
                        </strong>
                        <styled.small>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-ifAKCX",
                                  "isStatic": true,
                                  "lastClassName": "cFlEyZ",
                                  "rules": Array [],
                                },
                                "displayName": "styled.small",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-ifAKCX",
                                "target": "small",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <small
                              className=""
                            >
                              12月10日
                            </small>
                          </StyledComponent>
                        </styled.small>
                      </TweetHeader>
                      <styled.p>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-EHOje",
                                "isStatic": true,
                                "lastClassName": "c4",
                                "rules": Array [
                                  "
  margin: 0;
  white-space: pre-wrap;
  word-wrap: break-word;
",
                                ],
                              },
                              "displayName": "styled.p",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-EHOje",
                              "target": "p",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <p
                            className="c4"
                          >
                            PagesとOrganisms以外は状態を持たせない
  - それ以外のコンポーネントはステートレスなので簡単に作れる
  - Reduxみたいなところはフロントエンドエンジニアにまかせる
  #ThinkAtomicDesign
                          </p>
                        </StyledComponent>
                      </styled.p>
                      <TweetFooter>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(ModeCommentOutlinedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <ModeCommentOutlinedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0V0z"
                                                      fill="none"
                                                    />
                                                    <g>
                                                      <path
                                                        d="M20 17.17L18.83 16H4V4h16v13.17zM20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </ModeCommentOutlinedIcon>
                                          </pure(ModeCommentOutlinedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(RepeatRoundedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <RepeatRoundedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M7 7h10v1.79c0 .45.54.67.85.35l2.79-2.79c.2-.2.2-.51 0-.71l-2.79-2.79c-.31-.31-.85-.09-.85.36V5H6c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1s1-.45 1-1V7zm10 10H7v-1.79c0-.45-.54-.67-.85-.35l-2.79 2.79c-.2.2-.2.51 0 .71l2.79 2.79c.31.31.85.09.85-.36V19h11c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1s-1 .45-1 1v3z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </RepeatRoundedIcon>
                                          </pure(RepeatRoundedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(FavoriteBorderIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <FavoriteBorderIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0z"
                                                      fill="none"
                                                    />
                                                    <path
                                                      d="M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </FavoriteBorderIcon>
                                          </pure(FavoriteBorderIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </TweetFooter>
                    </div>
                  </StyledComponent>
                </styled.div>
              </div>
            </StyledComponent>
          </styled.div>
        </Tweet>
        <Tweet
          id="2"
          key="2"
          name="ozaki25"
          text="コンポーネントマネージャー
  - コンポーネントの管理に責任を持つ人
  #ThinkAtomicDesign"
          time="12月10日"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "
  border-bottom: 1px solid #e6ecf0;
  padding: 9px 12px 0;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c0"
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "
  margin-left: 58px;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <Styled(IconImage)
                        src="/icon.png"
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bxivhb",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "
  margin-left: -58px;
",
                                ],
                              },
                              "displayName": "Styled(IconImage)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bxivhb",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          src="/icon.png"
                        >
                          <IconImage
                            className="c2"
                            src="/icon.png"
                          >
                            <styled.img
                              className="c2"
                              src="/icon.png"
                            >
                              <StyledComponent
                                className="c2"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bdVaJa",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "
  border-radius: 50%;
  float: left;
  height: 48px;
  margin-top: 3px;
  position: absolute;
  width: 48px;
",
                                      ],
                                    },
                                    "displayName": "styled.img",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bdVaJa",
                                    "target": "img",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                src="/icon.png"
                              >
                                <img
                                  className="c2 c3"
                                  src="/icon.png"
                                />
                              </StyledComponent>
                            </styled.img>
                          </IconImage>
                        </StyledComponent>
                      </Styled(IconImage)>
                      <TweetHeader
                        name="ozaki25"
                        time="12月10日"
                      >
                        <strong>
                          ozaki25
                        </strong>
                        <styled.small>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-ifAKCX",
                                  "isStatic": true,
                                  "lastClassName": "cFlEyZ",
                                  "rules": Array [],
                                },
                                "displayName": "styled.small",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-ifAKCX",
                                "target": "small",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <small
                              className=""
                            >
                              12月10日
                            </small>
                          </StyledComponent>
                        </styled.small>
                      </TweetHeader>
                      <styled.p>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-EHOje",
                                "isStatic": true,
                                "lastClassName": "c4",
                                "rules": Array [
                                  "
  margin: 0;
  white-space: pre-wrap;
  word-wrap: break-word;
",
                                ],
                              },
                              "displayName": "styled.p",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-EHOje",
                              "target": "p",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <p
                            className="c4"
                          >
                            コンポーネントマネージャー
  - コンポーネントの管理に責任を持つ人
  #ThinkAtomicDesign
                          </p>
                        </StyledComponent>
                      </styled.p>
                      <TweetFooter>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(ModeCommentOutlinedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <ModeCommentOutlinedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0V0z"
                                                      fill="none"
                                                    />
                                                    <g>
                                                      <path
                                                        d="M20 17.17L18.83 16H4V4h16v13.17zM20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </ModeCommentOutlinedIcon>
                                          </pure(ModeCommentOutlinedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(RepeatRoundedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <RepeatRoundedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M7 7h10v1.79c0 .45.54.67.85.35l2.79-2.79c.2-.2.2-.51 0-.71l-2.79-2.79c-.31-.31-.85-.09-.85.36V5H6c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1s1-.45 1-1V7zm10 10H7v-1.79c0-.45-.54-.67-.85-.35l-2.79 2.79c-.2.2-.2.51 0 .71l2.79 2.79c.31.31.85.09.85-.36V19h11c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1s-1 .45-1 1v3z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </RepeatRoundedIcon>
                                          </pure(RepeatRoundedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(FavoriteBorderIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <FavoriteBorderIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0z"
                                                      fill="none"
                                                    />
                                                    <path
                                                      d="M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </FavoriteBorderIcon>
                                          </pure(FavoriteBorderIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </TweetFooter>
                    </div>
                  </StyledComponent>
                </styled.div>
              </div>
            </StyledComponent>
          </styled.div>
        </Tweet>
        <Tweet
          id="3"
          key="3"
          name="ozaki25"
          text="Storybookいいところ
  - どんなコンポーネントが存在してるか可視化できる
  - コンポーネントの扱い方が分かる
  - UIの修正デバッグが楽
  #ThinkAtomicDesign"
          time="12月10日"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "
  border-bottom: 1px solid #e6ecf0;
  padding: 9px 12px 0;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c0"
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "
  margin-left: 58px;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <Styled(IconImage)
                        src="/icon.png"
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bxivhb",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "
  margin-left: -58px;
",
                                ],
                              },
                              "displayName": "Styled(IconImage)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bxivhb",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          src="/icon.png"
                        >
                          <IconImage
                            className="c2"
                            src="/icon.png"
                          >
                            <styled.img
                              className="c2"
                              src="/icon.png"
                            >
                              <StyledComponent
                                className="c2"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bdVaJa",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "
  border-radius: 50%;
  float: left;
  height: 48px;
  margin-top: 3px;
  position: absolute;
  width: 48px;
",
                                      ],
                                    },
                                    "displayName": "styled.img",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bdVaJa",
                                    "target": "img",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                src="/icon.png"
                              >
                                <img
                                  className="c2 c3"
                                  src="/icon.png"
                                />
                              </StyledComponent>
                            </styled.img>
                          </IconImage>
                        </StyledComponent>
                      </Styled(IconImage)>
                      <TweetHeader
                        name="ozaki25"
                        time="12月10日"
                      >
                        <strong>
                          ozaki25
                        </strong>
                        <styled.small>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-ifAKCX",
                                  "isStatic": true,
                                  "lastClassName": "cFlEyZ",
                                  "rules": Array [],
                                },
                                "displayName": "styled.small",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-ifAKCX",
                                "target": "small",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <small
                              className=""
                            >
                              12月10日
                            </small>
                          </StyledComponent>
                        </styled.small>
                      </TweetHeader>
                      <styled.p>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-EHOje",
                                "isStatic": true,
                                "lastClassName": "c4",
                                "rules": Array [
                                  "
  margin: 0;
  white-space: pre-wrap;
  word-wrap: break-word;
",
                                ],
                              },
                              "displayName": "styled.p",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-EHOje",
                              "target": "p",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <p
                            className="c4"
                          >
                            Storybookいいところ
  - どんなコンポーネントが存在してるか可視化できる
  - コンポーネントの扱い方が分かる
  - UIの修正デバッグが楽
  #ThinkAtomicDesign
                          </p>
                        </StyledComponent>
                      </styled.p>
                      <TweetFooter>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(ModeCommentOutlinedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <ModeCommentOutlinedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0V0z"
                                                      fill="none"
                                                    />
                                                    <g>
                                                      <path
                                                        d="M20 17.17L18.83 16H4V4h16v13.17zM20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </ModeCommentOutlinedIcon>
                                          </pure(ModeCommentOutlinedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(RepeatRoundedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <RepeatRoundedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M7 7h10v1.79c0 .45.54.67.85.35l2.79-2.79c.2-.2.2-.51 0-.71l-2.79-2.79c-.31-.31-.85-.09-.85.36V5H6c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1s1-.45 1-1V7zm10 10H7v-1.79c0-.45-.54-.67-.85-.35l-2.79 2.79c-.2.2-.2.51 0 .71l2.79 2.79c.31.31.85.09.85-.36V19h11c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1s-1 .45-1 1v3z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </RepeatRoundedIcon>
                                          </pure(RepeatRoundedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(FavoriteBorderIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <FavoriteBorderIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0z"
                                                      fill="none"
                                                    />
                                                    <path
                                                      d="M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </FavoriteBorderIcon>
                                          </pure(FavoriteBorderIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </TweetFooter>
                    </div>
                  </StyledComponent>
                </styled.div>
              </div>
            </StyledComponent>
          </styled.div>
        </Tweet>
        <Tweet
          id="4"
          key="4"
          name="ozaki25"
          text="不必要にコンポーネント化しすぎた
  AtomicDesignあるあるだと思う
  #ThinkAtomicDesign"
          time="12月10日"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "
  border-bottom: 1px solid #e6ecf0;
  padding: 9px 12px 0;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c0"
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "
  margin-left: 58px;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <Styled(IconImage)
                        src="/icon.png"
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bxivhb",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "
  margin-left: -58px;
",
                                ],
                              },
                              "displayName": "Styled(IconImage)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bxivhb",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          src="/icon.png"
                        >
                          <IconImage
                            className="c2"
                            src="/icon.png"
                          >
                            <styled.img
                              className="c2"
                              src="/icon.png"
                            >
                              <StyledComponent
                                className="c2"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bdVaJa",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "
  border-radius: 50%;
  float: left;
  height: 48px;
  margin-top: 3px;
  position: absolute;
  width: 48px;
",
                                      ],
                                    },
                                    "displayName": "styled.img",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bdVaJa",
                                    "target": "img",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                src="/icon.png"
                              >
                                <img
                                  className="c2 c3"
                                  src="/icon.png"
                                />
                              </StyledComponent>
                            </styled.img>
                          </IconImage>
                        </StyledComponent>
                      </Styled(IconImage)>
                      <TweetHeader
                        name="ozaki25"
                        time="12月10日"
                      >
                        <strong>
                          ozaki25
                        </strong>
                        <styled.small>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-ifAKCX",
                                  "isStatic": true,
                                  "lastClassName": "cFlEyZ",
                                  "rules": Array [],
                                },
                                "displayName": "styled.small",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-ifAKCX",
                                "target": "small",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <small
                              className=""
                            >
                              12月10日
                            </small>
                          </StyledComponent>
                        </styled.small>
                      </TweetHeader>
                      <styled.p>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-EHOje",
                                "isStatic": true,
                                "lastClassName": "c4",
                                "rules": Array [
                                  "
  margin: 0;
  white-space: pre-wrap;
  word-wrap: break-word;
",
                                ],
                              },
                              "displayName": "styled.p",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-EHOje",
                              "target": "p",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <p
                            className="c4"
                          >
                            不必要にコンポーネント化しすぎた
  AtomicDesignあるあるだと思う
  #ThinkAtomicDesign
                          </p>
                        </StyledComponent>
                      </styled.p>
                      <TweetFooter>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(ModeCommentOutlinedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <ModeCommentOutlinedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0V0z"
                                                      fill="none"
                                                    />
                                                    <g>
                                                      <path
                                                        d="M20 17.17L18.83 16H4V4h16v13.17zM20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </ModeCommentOutlinedIcon>
                                          </pure(ModeCommentOutlinedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(RepeatRoundedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <RepeatRoundedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M7 7h10v1.79c0 .45.54.67.85.35l2.79-2.79c.2-.2.2-.51 0-.71l-2.79-2.79c-.31-.31-.85-.09-.85.36V5H6c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1s1-.45 1-1V7zm10 10H7v-1.79c0-.45-.54-.67-.85-.35l-2.79 2.79c-.2.2-.2.51 0 .71l2.79 2.79c.31.31.85.09.85-.36V19h11c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1s-1 .45-1 1v3z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </RepeatRoundedIcon>
                                          </pure(RepeatRoundedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(FavoriteBorderIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <FavoriteBorderIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0z"
                                                      fill="none"
                                                    />
                                                    <path
                                                      d="M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </FavoriteBorderIcon>
                                          </pure(FavoriteBorderIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </TweetFooter>
                    </div>
                  </StyledComponent>
                </styled.div>
              </div>
            </StyledComponent>
          </styled.div>
        </Tweet>
        <Tweet
          id="5"
          key="5"
          name="ozaki25"
          text="これかな
  http://atomicdesign.bradfrost.com/chapter-4/ 
  #ThinkAtomicDesign"
          time="12月10日"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "
  border-bottom: 1px solid #e6ecf0;
  padding: 9px 12px 0;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c0"
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "
  margin-left: 58px;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <Styled(IconImage)
                        src="/icon.png"
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bxivhb",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "
  margin-left: -58px;
",
                                ],
                              },
                              "displayName": "Styled(IconImage)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bxivhb",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          src="/icon.png"
                        >
                          <IconImage
                            className="c2"
                            src="/icon.png"
                          >
                            <styled.img
                              className="c2"
                              src="/icon.png"
                            >
                              <StyledComponent
                                className="c2"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bdVaJa",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "
  border-radius: 50%;
  float: left;
  height: 48px;
  margin-top: 3px;
  position: absolute;
  width: 48px;
",
                                      ],
                                    },
                                    "displayName": "styled.img",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bdVaJa",
                                    "target": "img",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                src="/icon.png"
                              >
                                <img
                                  className="c2 c3"
                                  src="/icon.png"
                                />
                              </StyledComponent>
                            </styled.img>
                          </IconImage>
                        </StyledComponent>
                      </Styled(IconImage)>
                      <TweetHeader
                        name="ozaki25"
                        time="12月10日"
                      >
                        <strong>
                          ozaki25
                        </strong>
                        <styled.small>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-ifAKCX",
                                  "isStatic": true,
                                  "lastClassName": "cFlEyZ",
                                  "rules": Array [],
                                },
                                "displayName": "styled.small",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-ifAKCX",
                                "target": "small",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <small
                              className=""
                            >
                              12月10日
                            </small>
                          </StyledComponent>
                        </styled.small>
                      </TweetHeader>
                      <styled.p>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-EHOje",
                                "isStatic": true,
                                "lastClassName": "c4",
                                "rules": Array [
                                  "
  margin: 0;
  white-space: pre-wrap;
  word-wrap: break-word;
",
                                ],
                              },
                              "displayName": "styled.p",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-EHOje",
                              "target": "p",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <p
                            className="c4"
                          >
                            これかな
  http://atomicdesign.bradfrost.com/chapter-4/ 
  #ThinkAtomicDesign
                          </p>
                        </StyledComponent>
                      </styled.p>
                      <TweetFooter>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(ModeCommentOutlinedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <ModeCommentOutlinedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0V0z"
                                                      fill="none"
                                                    />
                                                    <g>
                                                      <path
                                                        d="M20 17.17L18.83 16H4V4h16v13.17zM20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </ModeCommentOutlinedIcon>
                                          </pure(ModeCommentOutlinedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(RepeatRoundedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <RepeatRoundedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M7 7h10v1.79c0 .45.54.67.85.35l2.79-2.79c.2-.2.2-.51 0-.71l-2.79-2.79c-.31-.31-.85-.09-.85.36V5H6c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1s1-.45 1-1V7zm10 10H7v-1.79c0-.45-.54-.67-.85-.35l-2.79 2.79c-.2.2-.2.51 0 .71l2.79 2.79c.31.31.85.09.85-.36V19h11c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1s-1 .45-1 1v3z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </RepeatRoundedIcon>
                                          </pure(RepeatRoundedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(FavoriteBorderIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <FavoriteBorderIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0z"
                                                      fill="none"
                                                    />
                                                    <path
                                                      d="M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </FavoriteBorderIcon>
                                          </pure(FavoriteBorderIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </TweetFooter>
                    </div>
                  </StyledComponent>
                </styled.div>
              </div>
            </StyledComponent>
          </styled.div>
        </Tweet>
        <Tweet
          id="6"
          key="6"
          name="ozaki25"
          text="AtomicDesignはベースにすぎなくてプロジェクトごとに柔軟に変えていくことも必要
  #ThinkAtomicDesign"
          time="12月10日"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "
  border-bottom: 1px solid #e6ecf0;
  padding: 9px 12px 0;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c0"
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "
  margin-left: 58px;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <Styled(IconImage)
                        src="/icon.png"
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bxivhb",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "
  margin-left: -58px;
",
                                ],
                              },
                              "displayName": "Styled(IconImage)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bxivhb",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          src="/icon.png"
                        >
                          <IconImage
                            className="c2"
                            src="/icon.png"
                          >
                            <styled.img
                              className="c2"
                              src="/icon.png"
                            >
                              <StyledComponent
                                className="c2"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bdVaJa",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "
  border-radius: 50%;
  float: left;
  height: 48px;
  margin-top: 3px;
  position: absolute;
  width: 48px;
",
                                      ],
                                    },
                                    "displayName": "styled.img",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bdVaJa",
                                    "target": "img",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                src="/icon.png"
                              >
                                <img
                                  className="c2 c3"
                                  src="/icon.png"
                                />
                              </StyledComponent>
                            </styled.img>
                          </IconImage>
                        </StyledComponent>
                      </Styled(IconImage)>
                      <TweetHeader
                        name="ozaki25"
                        time="12月10日"
                      >
                        <strong>
                          ozaki25
                        </strong>
                        <styled.small>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-ifAKCX",
                                  "isStatic": true,
                                  "lastClassName": "cFlEyZ",
                                  "rules": Array [],
                                },
                                "displayName": "styled.small",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-ifAKCX",
                                "target": "small",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <small
                              className=""
                            >
                              12月10日
                            </small>
                          </StyledComponent>
                        </styled.small>
                      </TweetHeader>
                      <styled.p>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-EHOje",
                                "isStatic": true,
                                "lastClassName": "c4",
                                "rules": Array [
                                  "
  margin: 0;
  white-space: pre-wrap;
  word-wrap: break-word;
",
                                ],
                              },
                              "displayName": "styled.p",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-EHOje",
                              "target": "p",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <p
                            className="c4"
                          >
                            AtomicDesignはベースにすぎなくてプロジェクトごとに柔軟に変えていくことも必要
  #ThinkAtomicDesign
                          </p>
                        </StyledComponent>
                      </styled.p>
                      <TweetFooter>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(ModeCommentOutlinedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <ModeCommentOutlinedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0V0z"
                                                      fill="none"
                                                    />
                                                    <g>
                                                      <path
                                                        d="M20 17.17L18.83 16H4V4h16v13.17zM20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </ModeCommentOutlinedIcon>
                                          </pure(ModeCommentOutlinedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(RepeatRoundedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <RepeatRoundedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M7 7h10v1.79c0 .45.54.67.85.35l2.79-2.79c.2-.2.2-.51 0-.71l-2.79-2.79c-.31-.31-.85-.09-.85.36V5H6c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1s1-.45 1-1V7zm10 10H7v-1.79c0-.45-.54-.67-.85-.35l-2.79 2.79c-.2.2-.2.51 0 .71l2.79 2.79c.31.31.85.09.85-.36V19h11c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1s-1 .45-1 1v3z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </RepeatRoundedIcon>
                                          </pure(RepeatRoundedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(FavoriteBorderIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <FavoriteBorderIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0z"
                                                      fill="none"
                                                    />
                                                    <path
                                                      d="M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </FavoriteBorderIcon>
                                          </pure(FavoriteBorderIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </TweetFooter>
                    </div>
                  </StyledComponent>
                </styled.div>
              </div>
            </StyledComponent>
          </styled.div>
        </Tweet>
        <Tweet
          id="7"
          key="7"
          name="ozaki25"
          text="PagesとOrganismsどの単位でReduxをConnectするか
  #ThinkAtomicDesign"
          time="12月10日"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "
  border-bottom: 1px solid #e6ecf0;
  padding: 9px 12px 0;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c0"
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "
  margin-left: 58px;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <Styled(IconImage)
                        src="/icon.png"
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bxivhb",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "
  margin-left: -58px;
",
                                ],
                              },
                              "displayName": "Styled(IconImage)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bxivhb",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          src="/icon.png"
                        >
                          <IconImage
                            className="c2"
                            src="/icon.png"
                          >
                            <styled.img
                              className="c2"
                              src="/icon.png"
                            >
                              <StyledComponent
                                className="c2"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bdVaJa",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "
  border-radius: 50%;
  float: left;
  height: 48px;
  margin-top: 3px;
  position: absolute;
  width: 48px;
",
                                      ],
                                    },
                                    "displayName": "styled.img",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bdVaJa",
                                    "target": "img",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                src="/icon.png"
                              >
                                <img
                                  className="c2 c3"
                                  src="/icon.png"
                                />
                              </StyledComponent>
                            </styled.img>
                          </IconImage>
                        </StyledComponent>
                      </Styled(IconImage)>
                      <TweetHeader
                        name="ozaki25"
                        time="12月10日"
                      >
                        <strong>
                          ozaki25
                        </strong>
                        <styled.small>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-ifAKCX",
                                  "isStatic": true,
                                  "lastClassName": "cFlEyZ",
                                  "rules": Array [],
                                },
                                "displayName": "styled.small",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-ifAKCX",
                                "target": "small",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <small
                              className=""
                            >
                              12月10日
                            </small>
                          </StyledComponent>
                        </styled.small>
                      </TweetHeader>
                      <styled.p>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-EHOje",
                                "isStatic": true,
                                "lastClassName": "c4",
                                "rules": Array [
                                  "
  margin: 0;
  white-space: pre-wrap;
  word-wrap: break-word;
",
                                ],
                              },
                              "displayName": "styled.p",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-EHOje",
                              "target": "p",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <p
                            className="c4"
                          >
                            PagesとOrganismsどの単位でReduxをConnectするか
  #ThinkAtomicDesign
                          </p>
                        </StyledComponent>
                      </styled.p>
                      <TweetFooter>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(ModeCommentOutlinedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <ModeCommentOutlinedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0V0z"
                                                      fill="none"
                                                    />
                                                    <g>
                                                      <path
                                                        d="M20 17.17L18.83 16H4V4h16v13.17zM20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </ModeCommentOutlinedIcon>
                                          </pure(ModeCommentOutlinedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(RepeatRoundedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <RepeatRoundedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M7 7h10v1.79c0 .45.54.67.85.35l2.79-2.79c.2-.2.2-.51 0-.71l-2.79-2.79c-.31-.31-.85-.09-.85.36V5H6c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1s1-.45 1-1V7zm10 10H7v-1.79c0-.45-.54-.67-.85-.35l-2.79 2.79c-.2.2-.2.51 0 .71l2.79 2.79c.31.31.85.09.85-.36V19h11c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1s-1 .45-1 1v3z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </RepeatRoundedIcon>
                                          </pure(RepeatRoundedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(FavoriteBorderIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <FavoriteBorderIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0z"
                                                      fill="none"
                                                    />
                                                    <path
                                                      d="M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </FavoriteBorderIcon>
                                          </pure(FavoriteBorderIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </TweetFooter>
                    </div>
                  </StyledComponent>
                </styled.div>
              </div>
            </StyledComponent>
          </styled.div>
        </Tweet>
        <Tweet
          id="8"
          key="8"
          name="ozaki25"
          text="コンポーネント指向
  - 見た目と機能をカプセル化
  #ThinkAtomicDesign"
          time="12月10日"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "
  border-bottom: 1px solid #e6ecf0;
  padding: 9px 12px 0;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c0"
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "
  margin-left: 58px;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <Styled(IconImage)
                        src="/icon.png"
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bxivhb",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "
  margin-left: -58px;
",
                                ],
                              },
                              "displayName": "Styled(IconImage)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bxivhb",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          src="/icon.png"
                        >
                          <IconImage
                            className="c2"
                            src="/icon.png"
                          >
                            <styled.img
                              className="c2"
                              src="/icon.png"
                            >
                              <StyledComponent
                                className="c2"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bdVaJa",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "
  border-radius: 50%;
  float: left;
  height: 48px;
  margin-top: 3px;
  position: absolute;
  width: 48px;
",
                                      ],
                                    },
                                    "displayName": "styled.img",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bdVaJa",
                                    "target": "img",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                src="/icon.png"
                              >
                                <img
                                  className="c2 c3"
                                  src="/icon.png"
                                />
                              </StyledComponent>
                            </styled.img>
                          </IconImage>
                        </StyledComponent>
                      </Styled(IconImage)>
                      <TweetHeader
                        name="ozaki25"
                        time="12月10日"
                      >
                        <strong>
                          ozaki25
                        </strong>
                        <styled.small>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-ifAKCX",
                                  "isStatic": true,
                                  "lastClassName": "cFlEyZ",
                                  "rules": Array [],
                                },
                                "displayName": "styled.small",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-ifAKCX",
                                "target": "small",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <small
                              className=""
                            >
                              12月10日
                            </small>
                          </StyledComponent>
                        </styled.small>
                      </TweetHeader>
                      <styled.p>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-EHOje",
                                "isStatic": true,
                                "lastClassName": "c4",
                                "rules": Array [
                                  "
  margin: 0;
  white-space: pre-wrap;
  word-wrap: break-word;
",
                                ],
                              },
                              "displayName": "styled.p",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-EHOje",
                              "target": "p",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <p
                            className="c4"
                          >
                            コンポーネント指向
  - 見た目と機能をカプセル化
  #ThinkAtomicDesign
                          </p>
                        </StyledComponent>
                      </styled.p>
                      <TweetFooter>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(ModeCommentOutlinedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <ModeCommentOutlinedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0V0z"
                                                      fill="none"
                                                    />
                                                    <g>
                                                      <path
                                                        d="M20 17.17L18.83 16H4V4h16v13.17zM20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </ModeCommentOutlinedIcon>
                                          </pure(ModeCommentOutlinedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(RepeatRoundedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <RepeatRoundedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M7 7h10v1.79c0 .45.54.67.85.35l2.79-2.79c.2-.2.2-.51 0-.71l-2.79-2.79c-.31-.31-.85-.09-.85.36V5H6c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1s1-.45 1-1V7zm10 10H7v-1.79c0-.45-.54-.67-.85-.35l-2.79 2.79c-.2.2-.2.51 0 .71l2.79 2.79c.31.31.85.09.85-.36V19h11c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1s-1 .45-1 1v3z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </RepeatRoundedIcon>
                                          </pure(RepeatRoundedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(FavoriteBorderIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <FavoriteBorderIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0z"
                                                      fill="none"
                                                    />
                                                    <path
                                                      d="M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </FavoriteBorderIcon>
                                          </pure(FavoriteBorderIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </TweetFooter>
                    </div>
                  </StyledComponent>
                </styled.div>
              </div>
            </StyledComponent>
          </styled.div>
        </Tweet>
        <Tweet
          id="9"
          key="9"
          name="ozaki25"
          text="Template必要なのか
  たしかに使ってない
  #ThinkAtomicDesign"
          time="12月10日"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bwzfXH",
                    "isStatic": true,
                    "lastClassName": "c0",
                    "rules": Array [
                      "
  border-bottom: 1px solid #e6ecf0;
  padding: 9px 12px 0;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bwzfXH",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c0"
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htpNat",
                          "isStatic": true,
                          "lastClassName": "c1",
                          "rules": Array [
                            "
  margin-left: 58px;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htpNat",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c1"
                    >
                      <Styled(IconImage)
                        src="/icon.png"
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-bxivhb",
                                "isStatic": true,
                                "lastClassName": "c2",
                                "rules": Array [
                                  "
  margin-left: -58px;
",
                                ],
                              },
                              "displayName": "Styled(IconImage)",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-bxivhb",
                              "target": [Function],
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                              Symbol(Symbol.hasInstance): [Function],
                            }
                          }
                          forwardedRef={null}
                          src="/icon.png"
                        >
                          <IconImage
                            className="c2"
                            src="/icon.png"
                          >
                            <styled.img
                              className="c2"
                              src="/icon.png"
                            >
                              <StyledComponent
                                className="c2"
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "sc-bdVaJa",
                                      "isStatic": true,
                                      "lastClassName": "c3",
                                      "rules": Array [
                                        "
  border-radius: 50%;
  float: left;
  height: 48px;
  margin-top: 3px;
  position: absolute;
  width: 48px;
",
                                      ],
                                    },
                                    "displayName": "styled.img",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "sc-bdVaJa",
                                    "target": "img",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                src="/icon.png"
                              >
                                <img
                                  className="c2 c3"
                                  src="/icon.png"
                                />
                              </StyledComponent>
                            </styled.img>
                          </IconImage>
                        </StyledComponent>
                      </Styled(IconImage)>
                      <TweetHeader
                        name="ozaki25"
                        time="12月10日"
                      >
                        <strong>
                          ozaki25
                        </strong>
                        <styled.small>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-ifAKCX",
                                  "isStatic": true,
                                  "lastClassName": "cFlEyZ",
                                  "rules": Array [],
                                },
                                "displayName": "styled.small",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-ifAKCX",
                                "target": "small",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <small
                              className=""
                            >
                              12月10日
                            </small>
                          </StyledComponent>
                        </styled.small>
                      </TweetHeader>
                      <styled.p>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "sc-EHOje",
                                "isStatic": true,
                                "lastClassName": "c4",
                                "rules": Array [
                                  "
  margin: 0;
  white-space: pre-wrap;
  word-wrap: break-word;
",
                                ],
                              },
                              "displayName": "styled.p",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "sc-EHOje",
                              "target": "p",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <p
                            className="c4"
                          >
                            Template必要なのか
  たしかに使ってない
  #ThinkAtomicDesign
                          </p>
                        </StyledComponent>
                      </styled.p>
                      <TweetFooter>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(ModeCommentOutlinedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <ModeCommentOutlinedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0V0z"
                                                      fill="none"
                                                    />
                                                    <g>
                                                      <path
                                                        d="M20 17.17L18.83 16H4V4h16v13.17zM20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2z"
                                                      />
                                                    </g>
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </ModeCommentOutlinedIcon>
                                          </pure(ModeCommentOutlinedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(RepeatRoundedIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <RepeatRoundedIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M7 7h10v1.79c0 .45.54.67.85.35l2.79-2.79c.2-.2.2-.51 0-.71l-2.79-2.79c-.31-.31-.85-.09-.85.36V5H6c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1s1-.45 1-1V7zm10 10H7v-1.79c0-.45-.54-.67-.85-.35l-2.79 2.79c-.2.2-.2.51 0 .71l2.79 2.79c.31.31.85.09.85-.36V19h11c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1s-1 .45-1 1v3z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </RepeatRoundedIcon>
                                          </pure(RepeatRoundedIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": true,
                                  "lastClassName": "c5",
                                  "rules": Array [
                                    "
  display: inline-block;
  min-width: 80px;
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="c5"
                            >
                              <WithStyles(IconButton)>
                                <IconButton
                                  classes={
                                    Object {
                                      "colorInherit": "MuiIconButton-colorInherit-2",
                                      "colorPrimary": "MuiIconButton-colorPrimary-3",
                                      "colorSecondary": "MuiIconButton-colorSecondary-4",
                                      "disabled": "MuiIconButton-disabled-5",
                                      "label": "MuiIconButton-label-6",
                                      "root": "MuiIconButton-root-1",
                                    }
                                  }
                                  color="default"
                                  disabled={false}
                                >
                                  <WithStyles(ButtonBase)
                                    centerRipple={true}
                                    className="MuiIconButton-root-1"
                                    disabled={false}
                                    focusRipple={true}
                                  >
                                    <ButtonBase
                                      centerRipple={true}
                                      className="MuiIconButton-root-1"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-8",
                                          "focusVisible": "MuiButtonBase-focusVisible-9",
                                          "root": "MuiButtonBase-root-7",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={false}
                                      focusRipple={true}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-7 MuiIconButton-root-1"
                                        disabled={false}
                                        onBlur={[Function]}
                                        onContextMenu={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="0"
                                        type="button"
                                      >
                                        <span
                                          className="MuiIconButton-label-6"
                                        >
                                          <pure(FavoriteBorderIcon)
                                            color="action"
                                            fontSize="small"
                                          >
                                            <FavoriteBorderIcon
                                              color="action"
                                              fontSize="small"
                                            >
                                              <WithStyles(SvgIcon)
                                                color="action"
                                                fontSize="small"
                                              >
                                                <SvgIcon
                                                  classes={
                                                    Object {
                                                      "colorAction": "MuiSvgIcon-colorAction-13",
                                                      "colorDisabled": "MuiSvgIcon-colorDisabled-15",
                                                      "colorError": "MuiSvgIcon-colorError-14",
                                                      "colorPrimary": "MuiSvgIcon-colorPrimary-11",
                                                      "colorSecondary": "MuiSvgIcon-colorSecondary-12",
                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-16",
                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-18",
                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-17",
                                                      "root": "MuiSvgIcon-root-10",
                                                    }
                                                  }
                                                  color="action"
                                                  component="svg"
                                                  fontSize="small"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <svg
                                                    aria-hidden="true"
                                                    className="MuiSvgIcon-root-10 MuiSvgIcon-colorAction-13 MuiSvgIcon-fontSizeSmall-17"
                                                    focusable="false"
                                                    role="presentation"
                                                    viewBox="0 0 24 24"
                                                  >
                                                    <path
                                                      d="M0 0h24v24H0z"
                                                      fill="none"
                                                    />
                                                    <path
                                                      d="M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"
                                                    />
                                                  </svg>
                                                </SvgIcon>
                                              </WithStyles(SvgIcon)>
                                            </FavoriteBorderIcon>
                                          </pure(FavoriteBorderIcon)>
                                        </span>
                                        <NoSsr
                                          defer={false}
                                          fallback={null}
                                        >
                                          <WithStyles(TouchRipple)
                                            center={true}
                                            innerRef={[Function]}
                                          >
                                            <TouchRipple
                                              center={true}
                                              classes={
                                                Object {
                                                  "child": "MuiTouchRipple-child-33",
                                                  "childLeaving": "MuiTouchRipple-childLeaving-34",
                                                  "childPulsate": "MuiTouchRipple-childPulsate-35",
                                                  "ripple": "MuiTouchRipple-ripple-30",
                                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate-32",
                                                  "rippleVisible": "MuiTouchRipple-rippleVisible-31",
                                                  "root": "MuiTouchRipple-root-29",
                                                }
                                              }
                                            >
                                              <TransitionGroup
                                                childFactory={[Function]}
                                                className="MuiTouchRipple-root-29"
                                                component="span"
                                                enter={true}
                                                exit={true}
                                              >
                                                <span
                                                  className="MuiTouchRipple-root-29"
                                                />
                                              </TransitionGroup>
                                            </TouchRipple>
                                          </WithStyles(TouchRipple)>
                                        </NoSsr>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </IconButton>
                              </WithStyles(IconButton)>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </TweetFooter>
                    </div>
                  </StyledComponent>
                </styled.div>
              </div>
            </StyledComponent>
          </styled.div>
        </Tweet>
        <styled.div
          key="9"
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-gzVnrw",
                  "isStatic": true,
                  "lastClassName": "c6",
                  "rules": Array [
                    "
  text-align: center;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-gzVnrw",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <div
              className="c6"
            >
              <WithStyles(CircularProgress)>
                <CircularProgress
                  classes={
                    Object {
                      "circle": "MuiCircularProgress-circle-25",
                      "circleDisableShrink": "MuiCircularProgress-circleDisableShrink-28",
                      "circleIndeterminate": "MuiCircularProgress-circleIndeterminate-27",
                      "circleStatic": "MuiCircularProgress-circleStatic-26",
                      "colorPrimary": "MuiCircularProgress-colorPrimary-22",
                      "colorSecondary": "MuiCircularProgress-colorSecondary-23",
                      "indeterminate": "MuiCircularProgress-indeterminate-21",
                      "root": "MuiCircularProgress-root-19",
                      "static": "MuiCircularProgress-static-20",
                      "svg": "MuiCircularProgress-svg-24",
                    }
                  }
                  color="primary"
                  disableShrink={false}
                  size={40}
                  thickness={3.6}
                  value={0}
                  variant="indeterminate"
                >
                  <div
                    className="MuiCircularProgress-root-19 MuiCircularProgress-colorPrimary-22 MuiCircularProgress-indeterminate-21"
                    role="progressbar"
                    style={
                      Object {
                        "height": 40,
                        "width": 40,
                      }
                    }
                  >
                    <svg
                      className="MuiCircularProgress-svg-24"
                      viewBox="22 22 44 44"
                    >
                      <circle
                        className="MuiCircularProgress-circle-25 MuiCircularProgress-circleIndeterminate-27"
                        cx={44}
                        cy={44}
                        fill="none"
                        r={20.2}
                        strokeWidth={3.6}
                        style={Object {}}
                      />
                    </svg>
                  </div>
                </CircularProgress>
              </WithStyles(CircularProgress)>
            </div>
          </StyledComponent>
        </styled.div>
      </div>
    </InfiniteScroll>
  </TweetList>
</MockRouter>
`;
