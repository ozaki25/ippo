// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should match snapshot: Tweet/nomal 1`] = `
.c3 {
  margin: 0;
  white-space: pre-wrap;
  word-wrap: break-word;
}

.c4 {
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c5 {
  display: inline-block;
  margin: 4px 0;
  min-width: 78px;
}

.c0 {
  padding: 9px 12px 0;
}

.c1 {
  font-size: 15px;
  margin-left: 58px;
}

.c2 {
  float: left;
  margin-left: -58px;
  position: absolute;
}

<MockRouter
  createHref={[Function]}
  location=""
  params={Object {}}
  path=""
  push={[Function]}
  replace={[Function]}
  url=""
>
  <Tweet
    fixed={false}
    name="ozaki25"
    text="Storybookいいところ
  - どんなコンポーネントが存在してるか可視化できる
  - コンポーネントの扱い方が分かる
  - UIの修正デバッグが楽
  #ThinkAtomicDesign"
    time="12月10日"
  >
    <styled.div>
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bZQynM",
              "isStatic": true,
              "lastClassName": "c0",
              "rules": Array [
                "
  padding: 9px 12px 0;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bZQynM",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="c0"
        >
          <styled.div>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gzVnrw",
                    "isStatic": true,
                    "lastClassName": "c1",
                    "rules": Array [
                      "
  font-size: 15px;
  margin-left: 58px;
",
                    ],
                  },
                  "displayName": "styled.div",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gzVnrw",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c1"
              >
                <styled.div>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-htoDjs",
                          "isStatic": true,
                          "lastClassName": "c2",
                          "rules": Array [
                            "
  float: left;
  margin-left: -58px;
  position: absolute;
",
                          ],
                        },
                        "displayName": "styled.div",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-htoDjs",
                        "target": "div",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <div
                      className="c2"
                    >
                      <WithStyles(CharIcon)
                        name="ozaki25"
                      >
                        <CharIcon
                          classes={
                            Object {
                              "amber": "CharIcon-amber-17",
                              "avatar": "CharIcon-avatar-1",
                              "blue": "CharIcon-blue-9",
                              "blueGrey": "CharIcon-blueGrey-22",
                              "brown": "CharIcon-brown-20",
                              "cyan": "CharIcon-cyan-11",
                              "deepOrange": "CharIcon-deepOrange-19",
                              "deepPurple": "CharIcon-deepPurple-7",
                              "green": "CharIcon-green-13",
                              "grey": "CharIcon-grey-21",
                              "indigo": "CharIcon-indigo-8",
                              "lightBlue": "CharIcon-lightBlue-10",
                              "lightGreen": "CharIcon-lightGreen-14",
                              "lime": "CharIcon-lime-15",
                              "orange": "CharIcon-orange-18",
                              "pink": "CharIcon-pink-5",
                              "purple": "CharIcon-purple-6",
                              "red": "CharIcon-red-4",
                              "smallAvatar": "CharIcon-smallAvatar-2",
                              "teal": "CharIcon-teal-12",
                              "wrapper": "CharIcon-wrapper-3",
                              "yellow": "CharIcon-yellow-16",
                            }
                          }
                          name="ozaki25"
                          onClick={null}
                          small={false}
                        >
                          <WithStyles(IconButton)
                            className="CharIcon-wrapper-3"
                            disableRipple={true}
                            onClick={null}
                          >
                            <IconButton
                              className="CharIcon-wrapper-3"
                              classes={
                                Object {
                                  "colorInherit": "MuiIconButton-colorInherit-24",
                                  "colorPrimary": "MuiIconButton-colorPrimary-25",
                                  "colorSecondary": "MuiIconButton-colorSecondary-26",
                                  "disabled": "MuiIconButton-disabled-27",
                                  "label": "MuiIconButton-label-28",
                                  "root": "MuiIconButton-root-23",
                                }
                              }
                              color="default"
                              disableRipple={true}
                              disabled={false}
                              onClick={null}
                            >
                              <WithStyles(ButtonBase)
                                centerRipple={true}
                                className="MuiIconButton-root-23 CharIcon-wrapper-3"
                                disableRipple={true}
                                disabled={false}
                                focusRipple={true}
                                onClick={null}
                              >
                                <ButtonBase
                                  centerRipple={true}
                                  className="MuiIconButton-root-23 CharIcon-wrapper-3"
                                  classes={
                                    Object {
                                      "disabled": "MuiButtonBase-disabled-30",
                                      "focusVisible": "MuiButtonBase-focusVisible-31",
                                      "root": "MuiButtonBase-root-29",
                                    }
                                  }
                                  component="button"
                                  disableRipple={true}
                                  disableTouchRipple={false}
                                  disabled={false}
                                  focusRipple={true}
                                  onClick={null}
                                  tabIndex="0"
                                  type="button"
                                >
                                  <button
                                    className="MuiButtonBase-root-29 MuiIconButton-root-23 CharIcon-wrapper-3"
                                    disabled={false}
                                    onBlur={[Function]}
                                    onClick={null}
                                    onContextMenu={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchMove={[Function]}
                                    onTouchStart={[Function]}
                                    tabIndex="0"
                                    type="button"
                                  >
                                    <span
                                      className="MuiIconButton-label-28"
                                    >
                                      <WithStyles(Avatar)
                                        className="CharIcon-avatar-1 CharIcon-brown-20"
                                      >
                                        <Avatar
                                          className="CharIcon-avatar-1 CharIcon-brown-20"
                                          classes={
                                            Object {
                                              "colorDefault": "MuiAvatar-colorDefault-33",
                                              "img": "MuiAvatar-img-34",
                                              "root": "MuiAvatar-root-32",
                                            }
                                          }
                                          component="div"
                                        >
                                          <div
                                            className="MuiAvatar-root-32 MuiAvatar-colorDefault-33 CharIcon-avatar-1 CharIcon-brown-20"
                                          >
                                            o
                                          </div>
                                        </Avatar>
                                      </WithStyles(Avatar)>
                                    </span>
                                  </button>
                                </ButtonBase>
                              </WithStyles(ButtonBase)>
                            </IconButton>
                          </WithStyles(IconButton)>
                        </CharIcon>
                      </WithStyles(CharIcon)>
                    </div>
                  </StyledComponent>
                </styled.div>
                <TweetHeader
                  name="ozaki25"
                  time="12月10日"
                >
                  <strong>
                    ozaki25
                  </strong>
                  <styled.small>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-htpNat",
                            "isStatic": true,
                            "lastClassName": "KtFsv",
                            "rules": Array [],
                          },
                          "displayName": "styled.small",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-htpNat",
                          "target": "small",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <small
                        className=""
                      >
                        12月10日
                      </small>
                    </StyledComponent>
                  </styled.small>
                </TweetHeader>
                <TweetBody
                  text="Storybookいいところ
  - どんなコンポーネントが存在してるか可視化できる
  - コンポーネントの扱い方が分かる
  - UIの修正デバッグが楽
  #ThinkAtomicDesign"
                >
                  <styled.div>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bxivhb",
                            "isStatic": true,
                            "lastClassName": "c3",
                            "rules": Array [
                              "
  margin: 0;
  white-space: pre-wrap;
  word-wrap: break-word;
",
                            ],
                          },
                          "displayName": "styled.div",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bxivhb",
                          "target": "div",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <div
                        className="c3"
                      >
                        Storybookいいところ
  - どんなコンポーネントが存在してるか可視化できる
  - コンポーネントの扱い方が分かる
  - UIの修正デバッグが楽
  
                        <Styled(Link)
                          key="#ThinkAtomicDesign0"
                          to="/tweets?hashtag=ThinkAtomicDesign"
                        >
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-ifAKCX",
                                  "isStatic": true,
                                  "lastClassName": "c4",
                                  "rules": Array [
                                    "
  text-decoration: none;
",
                                  ],
                                },
                                "displayName": "Styled(Link)",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-ifAKCX",
                                "target": [Function],
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                                Symbol(Symbol.hasInstance): [Function],
                              }
                            }
                            forwardedRef={null}
                            to="/tweets?hashtag=ThinkAtomicDesign"
                          >
                            <Link
                              className="c4"
                              replace={false}
                              to="/tweets?hashtag=ThinkAtomicDesign"
                            >
                              <a
                                className="c4"
                                onClick={[Function]}
                              >
                                #ThinkAtomicDesign
                              </a>
                            </Link>
                          </StyledComponent>
                        </Styled(Link)>
                      </div>
                    </StyledComponent>
                  </styled.div>
                </TweetBody>
                <TweetFooter
                  onClickLike={[Function]}
                  onClickReply={[Function]}
                  onClickRetweet={[Function]}
                >
                  <Component
                    classes={
                      Object {
                        "smallIcon": "Component-smallIcon-35",
                      }
                    }
                    onClickLike={[Function]}
                    onClickReply={[Function]}
                    onClickRetweet={[Function]}
                  >
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": true,
                              "lastClassName": "c5",
                              "rules": Array [
                                "
  display: inline-block;
  margin: 4px 0;
  min-width: 78px;
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="c5"
                        >
                          <WithStyles(IconButton)
                            className="Component-smallIcon-35"
                            onClick={[Function]}
                          >
                            <IconButton
                              className="Component-smallIcon-35"
                              classes={
                                Object {
                                  "colorInherit": "MuiIconButton-colorInherit-24",
                                  "colorPrimary": "MuiIconButton-colorPrimary-25",
                                  "colorSecondary": "MuiIconButton-colorSecondary-26",
                                  "disabled": "MuiIconButton-disabled-27",
                                  "label": "MuiIconButton-label-28",
                                  "root": "MuiIconButton-root-23",
                                }
                              }
                              color="default"
                              disabled={false}
                              onClick={[Function]}
                            >
                              <WithStyles(ButtonBase)
                                centerRipple={true}
                                className="MuiIconButton-root-23 Component-smallIcon-35"
                                disabled={false}
                                focusRipple={true}
                                onClick={[Function]}
                              >
                                <ButtonBase
                                  centerRipple={true}
                                  className="MuiIconButton-root-23 Component-smallIcon-35"
                                  classes={
                                    Object {
                                      "disabled": "MuiButtonBase-disabled-30",
                                      "focusVisible": "MuiButtonBase-focusVisible-31",
                                      "root": "MuiButtonBase-root-29",
                                    }
                                  }
                                  component="button"
                                  disableRipple={false}
                                  disableTouchRipple={false}
                                  disabled={false}
                                  focusRipple={true}
                                  onClick={[Function]}
                                  tabIndex="0"
                                  type="button"
                                >
                                  <button
                                    className="MuiButtonBase-root-29 MuiIconButton-root-23 Component-smallIcon-35"
                                    disabled={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onContextMenu={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchMove={[Function]}
                                    onTouchStart={[Function]}
                                    tabIndex="0"
                                    type="button"
                                  >
                                    <span
                                      className="MuiIconButton-label-28"
                                    >
                                      <pure(ModeCommentOutlinedIcon)
                                        color="action"
                                        fontSize="inherit"
                                      >
                                        <ModeCommentOutlinedIcon
                                          color="action"
                                          fontSize="inherit"
                                        >
                                          <WithStyles(SvgIcon)
                                            color="action"
                                            fontSize="inherit"
                                          >
                                            <SvgIcon
                                              classes={
                                                Object {
                                                  "colorAction": "MuiSvgIcon-colorAction-39",
                                                  "colorDisabled": "MuiSvgIcon-colorDisabled-41",
                                                  "colorError": "MuiSvgIcon-colorError-40",
                                                  "colorPrimary": "MuiSvgIcon-colorPrimary-37",
                                                  "colorSecondary": "MuiSvgIcon-colorSecondary-38",
                                                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-42",
                                                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-44",
                                                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-43",
                                                  "root": "MuiSvgIcon-root-36",
                                                }
                                              }
                                              color="action"
                                              component="svg"
                                              fontSize="inherit"
                                              viewBox="0 0 24 24"
                                            >
                                              <svg
                                                aria-hidden="true"
                                                className="MuiSvgIcon-root-36 MuiSvgIcon-colorAction-39 MuiSvgIcon-fontSizeInherit-42"
                                                focusable="false"
                                                role="presentation"
                                                viewBox="0 0 24 24"
                                              >
                                                <path
                                                  d="M0 0h24v24H0V0z"
                                                  fill="none"
                                                />
                                                <g>
                                                  <path
                                                    d="M20 17.17L18.83 16H4V4h16v13.17zM20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2z"
                                                  />
                                                </g>
                                              </svg>
                                            </SvgIcon>
                                          </WithStyles(SvgIcon)>
                                        </ModeCommentOutlinedIcon>
                                      </pure(ModeCommentOutlinedIcon)>
                                    </span>
                                    <NoSsr
                                      defer={false}
                                      fallback={null}
                                    >
                                      <WithStyles(TouchRipple)
                                        center={true}
                                        innerRef={[Function]}
                                      >
                                        <TouchRipple
                                          center={true}
                                          classes={
                                            Object {
                                              "child": "MuiTouchRipple-child-54",
                                              "childLeaving": "MuiTouchRipple-childLeaving-55",
                                              "childPulsate": "MuiTouchRipple-childPulsate-56",
                                              "ripple": "MuiTouchRipple-ripple-51",
                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate-53",
                                              "rippleVisible": "MuiTouchRipple-rippleVisible-52",
                                              "root": "MuiTouchRipple-root-50",
                                            }
                                          }
                                        >
                                          <TransitionGroup
                                            childFactory={[Function]}
                                            className="MuiTouchRipple-root-50"
                                            component="span"
                                            enter={true}
                                            exit={true}
                                          >
                                            <span
                                              className="MuiTouchRipple-root-50"
                                            />
                                          </TransitionGroup>
                                        </TouchRipple>
                                      </WithStyles(TouchRipple)>
                                    </NoSsr>
                                  </button>
                                </ButtonBase>
                              </WithStyles(ButtonBase)>
                            </IconButton>
                          </WithStyles(IconButton)>
                        </div>
                      </StyledComponent>
                    </styled.div>
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": true,
                              "lastClassName": "c5",
                              "rules": Array [
                                "
  display: inline-block;
  margin: 4px 0;
  min-width: 78px;
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="c5"
                        >
                          <WithStyles(IconButton)
                            className="Component-smallIcon-35"
                            onClick={[Function]}
                          >
                            <IconButton
                              className="Component-smallIcon-35"
                              classes={
                                Object {
                                  "colorInherit": "MuiIconButton-colorInherit-24",
                                  "colorPrimary": "MuiIconButton-colorPrimary-25",
                                  "colorSecondary": "MuiIconButton-colorSecondary-26",
                                  "disabled": "MuiIconButton-disabled-27",
                                  "label": "MuiIconButton-label-28",
                                  "root": "MuiIconButton-root-23",
                                }
                              }
                              color="default"
                              disabled={false}
                              onClick={[Function]}
                            >
                              <WithStyles(ButtonBase)
                                centerRipple={true}
                                className="MuiIconButton-root-23 Component-smallIcon-35"
                                disabled={false}
                                focusRipple={true}
                                onClick={[Function]}
                              >
                                <ButtonBase
                                  centerRipple={true}
                                  className="MuiIconButton-root-23 Component-smallIcon-35"
                                  classes={
                                    Object {
                                      "disabled": "MuiButtonBase-disabled-30",
                                      "focusVisible": "MuiButtonBase-focusVisible-31",
                                      "root": "MuiButtonBase-root-29",
                                    }
                                  }
                                  component="button"
                                  disableRipple={false}
                                  disableTouchRipple={false}
                                  disabled={false}
                                  focusRipple={true}
                                  onClick={[Function]}
                                  tabIndex="0"
                                  type="button"
                                >
                                  <button
                                    className="MuiButtonBase-root-29 MuiIconButton-root-23 Component-smallIcon-35"
                                    disabled={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onContextMenu={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchMove={[Function]}
                                    onTouchStart={[Function]}
                                    tabIndex="0"
                                    type="button"
                                  >
                                    <span
                                      className="MuiIconButton-label-28"
                                    >
                                      <pure(RepeatRoundedIcon)
                                        color="action"
                                        fontSize="inherit"
                                      >
                                        <RepeatRoundedIcon
                                          color="action"
                                          fontSize="inherit"
                                        >
                                          <WithStyles(SvgIcon)
                                            color="action"
                                            fontSize="inherit"
                                          >
                                            <SvgIcon
                                              classes={
                                                Object {
                                                  "colorAction": "MuiSvgIcon-colorAction-39",
                                                  "colorDisabled": "MuiSvgIcon-colorDisabled-41",
                                                  "colorError": "MuiSvgIcon-colorError-40",
                                                  "colorPrimary": "MuiSvgIcon-colorPrimary-37",
                                                  "colorSecondary": "MuiSvgIcon-colorSecondary-38",
                                                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-42",
                                                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-44",
                                                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-43",
                                                  "root": "MuiSvgIcon-root-36",
                                                }
                                              }
                                              color="action"
                                              component="svg"
                                              fontSize="inherit"
                                              viewBox="0 0 24 24"
                                            >
                                              <svg
                                                aria-hidden="true"
                                                className="MuiSvgIcon-root-36 MuiSvgIcon-colorAction-39 MuiSvgIcon-fontSizeInherit-42"
                                                focusable="false"
                                                role="presentation"
                                                viewBox="0 0 24 24"
                                              >
                                                <path
                                                  d="M7 7h10v1.79c0 .45.54.67.85.35l2.79-2.79c.2-.2.2-.51 0-.71l-2.79-2.79c-.31-.31-.85-.09-.85.36V5H6c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1s1-.45 1-1V7zm10 10H7v-1.79c0-.45-.54-.67-.85-.35l-2.79 2.79c-.2.2-.2.51 0 .71l2.79 2.79c.31.31.85.09.85-.36V19h11c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1s-1 .45-1 1v3z"
                                                />
                                              </svg>
                                            </SvgIcon>
                                          </WithStyles(SvgIcon)>
                                        </RepeatRoundedIcon>
                                      </pure(RepeatRoundedIcon)>
                                    </span>
                                    <NoSsr
                                      defer={false}
                                      fallback={null}
                                    >
                                      <WithStyles(TouchRipple)
                                        center={true}
                                        innerRef={[Function]}
                                      >
                                        <TouchRipple
                                          center={true}
                                          classes={
                                            Object {
                                              "child": "MuiTouchRipple-child-54",
                                              "childLeaving": "MuiTouchRipple-childLeaving-55",
                                              "childPulsate": "MuiTouchRipple-childPulsate-56",
                                              "ripple": "MuiTouchRipple-ripple-51",
                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate-53",
                                              "rippleVisible": "MuiTouchRipple-rippleVisible-52",
                                              "root": "MuiTouchRipple-root-50",
                                            }
                                          }
                                        >
                                          <TransitionGroup
                                            childFactory={[Function]}
                                            className="MuiTouchRipple-root-50"
                                            component="span"
                                            enter={true}
                                            exit={true}
                                          >
                                            <span
                                              className="MuiTouchRipple-root-50"
                                            />
                                          </TransitionGroup>
                                        </TouchRipple>
                                      </WithStyles(TouchRipple)>
                                    </NoSsr>
                                  </button>
                                </ButtonBase>
                              </WithStyles(ButtonBase)>
                            </IconButton>
                          </WithStyles(IconButton)>
                        </div>
                      </StyledComponent>
                    </styled.div>
                    <styled.div>
                      <StyledComponent
                        forwardedComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "attrs": Array [],
                            "componentStyle": ComponentStyle {
                              "componentId": "sc-EHOje",
                              "isStatic": true,
                              "lastClassName": "c5",
                              "rules": Array [
                                "
  display: inline-block;
  margin: 4px 0;
  min-width: 78px;
",
                              ],
                            },
                            "displayName": "styled.div",
                            "foldedComponentIds": Array [],
                            "render": [Function],
                            "styledComponentId": "sc-EHOje",
                            "target": "div",
                            "toString": [Function],
                            "warnTooManyClasses": [Function],
                            "withComponent": [Function],
                          }
                        }
                        forwardedRef={null}
                      >
                        <div
                          className="c5"
                        >
                          <WithStyles(IconButton)
                            className="Component-smallIcon-35"
                            onClick={[Function]}
                          >
                            <IconButton
                              className="Component-smallIcon-35"
                              classes={
                                Object {
                                  "colorInherit": "MuiIconButton-colorInherit-24",
                                  "colorPrimary": "MuiIconButton-colorPrimary-25",
                                  "colorSecondary": "MuiIconButton-colorSecondary-26",
                                  "disabled": "MuiIconButton-disabled-27",
                                  "label": "MuiIconButton-label-28",
                                  "root": "MuiIconButton-root-23",
                                }
                              }
                              color="default"
                              disabled={false}
                              onClick={[Function]}
                            >
                              <WithStyles(ButtonBase)
                                centerRipple={true}
                                className="MuiIconButton-root-23 Component-smallIcon-35"
                                disabled={false}
                                focusRipple={true}
                                onClick={[Function]}
                              >
                                <ButtonBase
                                  centerRipple={true}
                                  className="MuiIconButton-root-23 Component-smallIcon-35"
                                  classes={
                                    Object {
                                      "disabled": "MuiButtonBase-disabled-30",
                                      "focusVisible": "MuiButtonBase-focusVisible-31",
                                      "root": "MuiButtonBase-root-29",
                                    }
                                  }
                                  component="button"
                                  disableRipple={false}
                                  disableTouchRipple={false}
                                  disabled={false}
                                  focusRipple={true}
                                  onClick={[Function]}
                                  tabIndex="0"
                                  type="button"
                                >
                                  <button
                                    className="MuiButtonBase-root-29 MuiIconButton-root-23 Component-smallIcon-35"
                                    disabled={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onContextMenu={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchMove={[Function]}
                                    onTouchStart={[Function]}
                                    tabIndex="0"
                                    type="button"
                                  >
                                    <span
                                      className="MuiIconButton-label-28"
                                    >
                                      <pure(FavoriteBorderIcon)
                                        color="action"
                                        fontSize="inherit"
                                      >
                                        <FavoriteBorderIcon
                                          color="action"
                                          fontSize="inherit"
                                        >
                                          <WithStyles(SvgIcon)
                                            color="action"
                                            fontSize="inherit"
                                          >
                                            <SvgIcon
                                              classes={
                                                Object {
                                                  "colorAction": "MuiSvgIcon-colorAction-39",
                                                  "colorDisabled": "MuiSvgIcon-colorDisabled-41",
                                                  "colorError": "MuiSvgIcon-colorError-40",
                                                  "colorPrimary": "MuiSvgIcon-colorPrimary-37",
                                                  "colorSecondary": "MuiSvgIcon-colorSecondary-38",
                                                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-42",
                                                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-44",
                                                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-43",
                                                  "root": "MuiSvgIcon-root-36",
                                                }
                                              }
                                              color="action"
                                              component="svg"
                                              fontSize="inherit"
                                              viewBox="0 0 24 24"
                                            >
                                              <svg
                                                aria-hidden="true"
                                                className="MuiSvgIcon-root-36 MuiSvgIcon-colorAction-39 MuiSvgIcon-fontSizeInherit-42"
                                                focusable="false"
                                                role="presentation"
                                                viewBox="0 0 24 24"
                                              >
                                                <path
                                                  d="M0 0h24v24H0z"
                                                  fill="none"
                                                />
                                                <path
                                                  d="M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"
                                                />
                                              </svg>
                                            </SvgIcon>
                                          </WithStyles(SvgIcon)>
                                        </FavoriteBorderIcon>
                                      </pure(FavoriteBorderIcon)>
                                    </span>
                                    <NoSsr
                                      defer={false}
                                      fallback={null}
                                    >
                                      <WithStyles(TouchRipple)
                                        center={true}
                                        innerRef={[Function]}
                                      >
                                        <TouchRipple
                                          center={true}
                                          classes={
                                            Object {
                                              "child": "MuiTouchRipple-child-54",
                                              "childLeaving": "MuiTouchRipple-childLeaving-55",
                                              "childPulsate": "MuiTouchRipple-childPulsate-56",
                                              "ripple": "MuiTouchRipple-ripple-51",
                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate-53",
                                              "rippleVisible": "MuiTouchRipple-rippleVisible-52",
                                              "root": "MuiTouchRipple-root-50",
                                            }
                                          }
                                        >
                                          <TransitionGroup
                                            childFactory={[Function]}
                                            className="MuiTouchRipple-root-50"
                                            component="span"
                                            enter={true}
                                            exit={true}
                                          >
                                            <span
                                              className="MuiTouchRipple-root-50"
                                            />
                                          </TransitionGroup>
                                        </TouchRipple>
                                      </WithStyles(TouchRipple)>
                                    </NoSsr>
                                  </button>
                                </ButtonBase>
                              </WithStyles(ButtonBase)>
                            </IconButton>
                          </WithStyles(IconButton)>
                        </div>
                      </StyledComponent>
                    </styled.div>
                  </Component>
                </TweetFooter>
              </div>
            </StyledComponent>
          </styled.div>
        </div>
      </StyledComponent>
    </styled.div>
    <WithStyles(Divider)
      light={true}
    >
      <Divider
        absolute={false}
        classes={
          Object {
            "absolute": "MuiDivider-absolute-46",
            "inset": "MuiDivider-inset-47",
            "light": "MuiDivider-light-48",
            "middle": "MuiDivider-middle-49",
            "root": "MuiDivider-root-45",
          }
        }
        component="hr"
        light={true}
        variant="fullWidth"
      >
        <hr
          className="MuiDivider-root-45 MuiDivider-light-48"
        />
      </Divider>
    </WithStyles(Divider)>
  </Tweet>
</MockRouter>
`;
