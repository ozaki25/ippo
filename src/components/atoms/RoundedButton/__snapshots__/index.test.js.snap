// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should match snapshot: RoundedButton/nomal 1`] = `
<MockRouter
  createHref={[Function]}
  location=""
  params={Object {}}
  path=""
  push={[Function]}
  replace={[Function]}
  url=""
>
  <WithStyles(RoundedButton)
    onClick={[MockFunction]}
  >
    <RoundedButton
      classes={
        Object {
          "rounded": "RoundedButton-rounded-1",
        }
      }
      onClick={[MockFunction]}
    >
      <WithStyles(Button)
        className="RoundedButton-rounded-1"
        color="inherit"
        onClick={[MockFunction]}
        variant="contained"
      >
        <Button
          className="RoundedButton-rounded-1"
          classes={
            Object {
              "colorInherit": "MuiButton-colorInherit-23",
              "contained": "MuiButton-contained-13",
              "containedPrimary": "MuiButton-containedPrimary-14",
              "containedSecondary": "MuiButton-containedSecondary-15",
              "disabled": "MuiButton-disabled-22",
              "extendedFab": "MuiButton-extendedFab-20",
              "fab": "MuiButton-fab-19",
              "flat": "MuiButton-flat-7",
              "flatPrimary": "MuiButton-flatPrimary-8",
              "flatSecondary": "MuiButton-flatSecondary-9",
              "focusVisible": "MuiButton-focusVisible-21",
              "fullWidth": "MuiButton-fullWidth-27",
              "label": "MuiButton-label-3",
              "mini": "MuiButton-mini-24",
              "outlined": "MuiButton-outlined-10",
              "outlinedPrimary": "MuiButton-outlinedPrimary-11",
              "outlinedSecondary": "MuiButton-outlinedSecondary-12",
              "raised": "MuiButton-raised-16",
              "raisedPrimary": "MuiButton-raisedPrimary-17",
              "raisedSecondary": "MuiButton-raisedSecondary-18",
              "root": "MuiButton-root-2",
              "sizeLarge": "MuiButton-sizeLarge-26",
              "sizeSmall": "MuiButton-sizeSmall-25",
              "text": "MuiButton-text-4",
              "textPrimary": "MuiButton-textPrimary-5",
              "textSecondary": "MuiButton-textSecondary-6",
            }
          }
          color="inherit"
          component="button"
          disableFocusRipple={false}
          disabled={false}
          fullWidth={false}
          mini={false}
          onClick={[MockFunction]}
          size="medium"
          type="button"
          variant="contained"
        >
          <WithStyles(ButtonBase)
            className="MuiButton-root-2 MuiButton-contained-13 MuiButton-raised-16 MuiButton-colorInherit-23 RoundedButton-rounded-1"
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="MuiButton-focusVisible-21"
            onClick={[MockFunction]}
            type="button"
          >
            <ButtonBase
              centerRipple={false}
              className="MuiButton-root-2 MuiButton-contained-13 MuiButton-raised-16 MuiButton-colorInherit-23 RoundedButton-rounded-1"
              classes={
                Object {
                  "disabled": "MuiButtonBase-disabled-29",
                  "focusVisible": "MuiButtonBase-focusVisible-30",
                  "root": "MuiButtonBase-root-28",
                }
              }
              component="button"
              disableRipple={false}
              disableTouchRipple={false}
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="MuiButton-focusVisible-21"
              onClick={[MockFunction]}
              tabIndex="0"
              type="button"
            >
              <button
                className="MuiButtonBase-root-28 MuiButton-root-2 MuiButton-contained-13 MuiButton-raised-16 MuiButton-colorInherit-23 RoundedButton-rounded-1"
                disabled={false}
                onBlur={[Function]}
                onClick={[MockFunction]}
                onContextMenu={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                tabIndex="0"
                type="button"
              >
                <span
                  className="MuiButton-label-3"
                >
                  ボタン
                </span>
                <NoSsr
                  defer={false}
                  fallback={null}
                >
                  <WithStyles(TouchRipple)
                    center={false}
                    innerRef={[Function]}
                  >
                    <TouchRipple
                      center={false}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child-35",
                          "childLeaving": "MuiTouchRipple-childLeaving-36",
                          "childPulsate": "MuiTouchRipple-childPulsate-37",
                          "ripple": "MuiTouchRipple-ripple-32",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate-34",
                          "rippleVisible": "MuiTouchRipple-rippleVisible-33",
                          "root": "MuiTouchRipple-root-31",
                        }
                      }
                    >
                      <TransitionGroup
                        childFactory={[Function]}
                        className="MuiTouchRipple-root-31"
                        component="span"
                        enter={true}
                        exit={true}
                      >
                        <span
                          className="MuiTouchRipple-root-31"
                        />
                      </TransitionGroup>
                    </TouchRipple>
                  </WithStyles(TouchRipple)>
                </NoSsr>
              </button>
            </ButtonBase>
          </WithStyles(ButtonBase)>
        </Button>
      </WithStyles(Button)>
    </RoundedButton>
  </WithStyles(RoundedButton)>
</MockRouter>
`;
